Method overriding in Java:
    Method overriding  happens when we have same method names with same signature (method name and its parameter are
    called signature of a method) in parent class and in a child class.
Benefits:
    1. Flexibility, With the help of method overriding, child classes can provide its own implementations for methods that are present
    in the parent class.
    2. Polymorphism: same method can behave differently depending upon the object we call it.
Rules:
    1. There must be parent child relationship between the classes.
    2. The method that we are trying to override must be present inside the child class with same name and parameters.
    3. If something don't participate inheritance, we can't override it, for example private methods and fields and contructors.
    4. If a method is declared final inside the parent class we can't override that method inside the child class.
    5. We can't override the static methods but we can redeclare them.
    6. We can't override the main methods but we can redeclare them.
    7. We can't change the access modifier to be more restrictive.
    8. Method return type should be the same.
Method Overloading                                vs                         Method overriding:
    Method signature should be different                              Method signature should be the same.
    Return type can be different                                      Return type should be the same.
    We don't care about the access modifiers                          Access modifiers can't be more restrictive
    We dont't care about the non-access modifiers                     We do care about the non-access modifiers.
    (final static abstract)
    We can overload constructors                                      We can't override constructors.
    We achieve compile time polymorphism or early binding             Run time polymorphism or dynamic polymorphism or
    or static polymorphism                                            late binding.

Polymorphism:
    Polymorphism happens when an object behaves different. For example a method behave differently when we pass different
    parameters or when we call the method using different objects.

private access modifier is not participate in inheritance.
