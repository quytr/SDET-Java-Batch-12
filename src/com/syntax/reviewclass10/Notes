Inheritance in Java:
    This is mechanism in Java through which one class can acquire the properties and methods from another class. The class
    from which we acquire the properties in called parent/superclass/baseclass and the class which acquire the properties
    and methods is called child class/derived/subclass.
Advantages:
    1. Code duplication is reduced.
    2. Save Memory.
    3. Execution time is less.
Disadvantages:
    1. Classes get tightly coupled. If we change some in the parent class it will affect all the children classes, and we
    have to make sure that this new changed is compatible with the code that we have in the children classes.
When we should use Inheritance:
    if there is a case in which we would have to use the same methods in many classes and the classes are closely related
    to each other the best practice would be to create a parent class and use it to extend the methods into the subclasses.
    For example: Cat class and Dog class.

Types of Inheritance:
    We have 4 types of inheritance:
    1. Single
    2. Hierarchical
    3. Multilevel
    4. Multiple

Single inheritance:
    In Single Inheritance, we have only one parent and only one child class.
Class Animal{
String name;
String color;
int age;
double weight;
}

class Dog extends Animal{
}

Hierarchical inheritance:
    In Hierarchical we have only one parent class and multiple children classes.
    for example the Object class in JDK
class Animal{
String name;
String color;
int age;
double weight;
}

class Dog extends Animal{
}

class Cat extends Animal{
}
Multilevel Inheritance:
    If we have one parent and one child class and many intermediate classes it is called multilevel
    inheritance
    CEO-->Manager-->Assisst Manager--> Senior Employee-->Junior Employee
class Human{
String name;

}
class Employee extends Human{
String employeeId;
}
class Teacher extends Employee{
String subjects
}
Multiple Inheritance:
in Multiple Inheritance we have a single child class and multiple parent classes: This is not
supported in java with classes but possible with the help of interfaces.
class Display{
int resolution;

}
class Keyboard{
int noOfKeys
}
class Laptop extends Display,Keyboard{
}
Rules:
    1) Private members are not inherited (private fields and private methods)
    2) Constructors don't participate in inheritance
    3) if we have constructor in the parent class we must have a matching constructor in the
    children classes as well.
    4) in Java a subclass can only extend single parent class.

Super Keyword:
    Super keyword is a reference variable that we can use to access the fields or methods or constructors of the parent
    class.
Uses:
    1. If we have same named fields in the parent class and in the child class, we can use super keyword to refer to
    the parent class field as by default, Java prefers the instance field of the child class.
    2. We can use the super keyword to call the method of the parent class if we have same named method in the child class
    as well.
    3. We can use super with () to call the parent class constructor.

Overloading in Java:
    When same method name exists in a class  with different number of parameters or with different type of parameters
    or with different sequence of parameters.

Advantage of overloading:
    1) More readable code
    2) codes are easier to use:
    3) flexible code
    4) we can have polymorphism with the help of method overloading.

when to overload a method:
    if methods are performing same operations but with different parameters, then we should overload these methods.

Rules:
    1) Method name should be same
    2) METHOD signature (method name + parameters list) should be different.
    3) we can't overload a method by just changing it's return type.
    4) we can't overload just by changing its access modifiers. (public private etc.)
    5) we can't overload a method by just changing its non-access modifiers (static final etc.)
    6) we can overload static methods and main method as weill.


