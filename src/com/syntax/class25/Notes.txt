Abstract classes in Java:
    Abstract classes in Java are the classes with abstract keyword. We use abstract classes to achieve abstraction.
Abstraction:
    Is the process of hiding implementation details and only showing the functionality to end user.
Advantages:
    1. reduces the complexity.
    2. improves the maintainability.
    3. can also enforce rules up to a certain limit.
Disadvantages:
    1. classes get tightly coupled.
    2.
class Dog{
    String name;
    static int legs = 4;
    //concrete class
}

public abstract class Phone{
    String make;
    String model;
    static boolean has5G = true;
}
Rules:
    Abstract classes can have all the things that regular classes do but we can't create their object directly and if a
class is inheriting from the abstract class it must either provide the implementation for the abstract method or it must
be declared abstract.
1. we can't have final and abstract keywords with a method at the same time. (abstract methods are undefined and final
you can't change).
2. we can't have static and abstract keywords with a method at the same time. (can't override the static method)
3. abstract keyword with fields are not allowed.

Interfaces:
Interfaces are also used to achieve abstraction in java.
we can create an interface with the keyword interface.

the field always public static final.
by default, method is abstract method

interface Human{
    public static final int leg =2;
    public abstract void walk();
    public void eat(){

    }

}
